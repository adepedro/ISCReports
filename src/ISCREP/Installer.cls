Class ISCREP.Installer
{
Parameter BasePath = "/opt/iscreports/app";

Parameter SystemNamespace = "JRSYSTEM";
Parameter RealmNamespace = "JRREALMDB";
Parameter ProfilingNamespace = "JRPROFILING";

Parameter SystemDBPath = "/opt/iscreports/db/jrsystem";
Parameter RealmDBPath = "/opt/iscreports/db/jrrealm";
Parameter ProfilingDBPath = "/opt/iscreports/db/jrprofiling";

Parameter CreateAppNamespace = "no";
Parameter Namespace = "ISCREP";
Parameter DataDBPath = "/opt/iscreports/db/iscreports/data";
Parameter CodeDBPath = "/opt/iscreports/db/iscreports/code";

XData Install
{
<Manifest>
	<Var Name="SourcePath" Value="${BasePath}/src/"/>
    <Var Name="ConfigPath" Value="${BasePath}/config/"/>
    <Log Text="Creating namespace ${#SystemNamespace}" Level="0"/> 
    <Namespace Name="${#SystemNamespace}" Create="yes" Ensemble="0"> 
        <Configuration> 
            <Database Name="${#SystemNamespace}" Dir="${#SystemDBPath}" Create="yes" MountRequired="true" Resource="%DB_${#SystemNamespace}" PublicPermissions="" MountAtStartup="true"/> 
        </Configuration>
    </Namespace>
    <Log Text="Creating namespace ${#RealmNamespace}" Level="0"/> 
    <Namespace Name="${#RealmNamespace}" Create="yes" Ensemble="0"> 
        <Configuration> 
            <Database Name="${#RealmNamespace}" Dir="${#RealmDBPath}" Create="yes" MountRequired="true" Resource="%DB_${#RealmNamespace}" PublicPermissions="" MountAtStartup="true"/> 
        </Configuration>
    </Namespace>
    <Log Text="Creating namespace ${#ProfilingNamespace}" Level="0"/> 
    <Namespace Name="${#ProfilingNamespace}" Create="yes" Ensemble="0"> 
        <Configuration> 
            <Database Name="${#ProfilingNamespace}" Dir="${#ProfilingDBPath}" Create="yes" MountRequired="true" Resource="%DB_${#ProfilingNamespace}" PublicPermissions="" MountAtStartup="true"/> 
        </Configuration>
    </Namespace>
    <Invoke Class="Security.Users" Method="Import" CheckStatus="true">
        <Arg Value="${ConfigPath}JRUser.xml"/>
    </Invoke>
    <If Condition='"${CreateNamespace}"="yes"'>
        <Log Text="Creating namespace ${Namespace}" Level="0"/> 
        <Namespace Name="${Namespace}" Create="yes" Code="${Namespace}-CODE" Data="${Namespace}-DATA" Ensemble="1"> 
            <Configuration> 
                <Database Name="${Namespace}-DATA" Dir="${DataDBPath}" Create="yes" MountRequired="true" Resource="%DB_${Namespace}-DATA" PublicPermissions="" MountAtStartup="true"/> 
                <Database Name="${Namespace}-CODE" Dir="${CodeDBPath}" Create="yes" MountRequired="true" Resource="%DB_${Namespace}-CODE" PublicPermissions="" MountAtStartup="true"/> 
            </Configuration>
            <Import File="${SourcePath}" Recurse="1" Flags="cuk" />
        </Namespace>
    </If>
<!--
    <Var Name="jrpasswd" Value="Jreport20!"/>
    <User Username="jruser" PasswordVar="jrpasswd" Roles="%DB_${#SystemNamespace},%DB_${#RealmNamespace},%DB_${#ProfilingNamespace},%SQL" Fullname="JReport user" ChangePassword="0" Enabled="1"/>
-->
</Manifest>
}

/// This is a method generator whose code is generated by XGL
ClassMethod RunManifest(ByRef pVars, pLogLevel As %Integer = 3, pInstaller As %Installer.Installer, pLogger As %Installer.AbstractLogger) As %Status [ CodeMode = objectgenerator, Internal ]
{
   Quit ##class(%Installer.Manifest).%Generate(%compiledclass, %code, "Install")
}

/// Installer entry point
/// Use this in case you want to automate container installations
ClassMethod RunWithParams(ByRef vars) As %Status
{
	set ret = $$$OK
	set previousNamespace = $namespace

    try { 
        write "START INSTALLER",! 
		
		// set default values for installer variables
        for ivar="BasePath","Namespace","CreateNamespace","DataDBPath","CodeDBPath" {
            if '$data(vars(ivar)) set vars(ivar)=$parameter($classname(), ivar)
        }
		$$$ThrowOnError(..RunManifest(.vars))


        write !,"INSTALLER SUCCESS",!

    } catch ex { 
        set sc = ex.AsStatus() 
        write $System.Status.GetErrorText(sc),! 
        do $SYSTEM.Process.Terminate($JOB,1) 
    }

	set $namespace = previousNamespace
    quit ret
}





/// Log a message
/// pText - Text message
/// pTimeStamp - Add a timestamp
/// pNewLine - Add a new line
ClassMethod Log(pText As %String, pTimeStamp As %Boolean = 1, pNewLine As %Boolean = 1)
{
	write $case(pTimeStamp,1:"["_$zdt($h,3)_"] ",:"")_pText_$case(pNewLine,1:$$$NL,:"")
}

}